var documenterSearchIndex = {"docs":
[{"location":"index.html#Makie.jl-Documentation-1","page":"Home","title":"Makie.jl Documentation","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Hi! Welcome to Makie, a high-performance, extendable, and multi-platform plotting package for Julia.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":" <iframe src=\"https://simondanisch.github.io/ReferenceImages/gallery/index.html\" height=\"1000\" width=\"100%\" frameborder=\"0\"></iframe>","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"For more examples, see the Example Gallery.","category":"page"},{"location":"index.html#Installation-and-tutorial-1","page":"Home","title":"Installation & tutorial","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"See the Tutorial.","category":"page"},{"location":"index.html#I'm-an-expert!-1","page":"Home","title":"I'm an expert!","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Head straight to the Plotting functions overview.","category":"page"},{"location":"basic-tutorials.html#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"Below is a quick tutorial to help get you started. Note that we assume you have Julia installed and configured already.","category":"page"},{"location":"basic-tutorials.html#Getting-Makie-1","page":"Tutorial","title":"Getting Makie","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"add Makie","category":"page"},{"location":"basic-tutorials.html#Getting-latest-version-of-Makie-1","page":"Tutorial","title":"Getting latest version of Makie","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"add Makie#master AbstractPlotting#master GLMakie#master\ntest Makie","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"The first use of Makie might take a little bit of time, due to precompilation.","category":"page"},{"location":"basic-tutorials.html#Set-the-Scene-1","page":"Tutorial","title":"Set the Scene","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"The Scene object holds everything in a plot, and you can initialize it by doing so:","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"scene = Scene()","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"Note that before you put anything in the scene, it will be black!","category":"page"},{"location":"basic-tutorials.html#Basic-plotting-1","page":"Tutorial","title":"Basic plotting","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"Below are some examples of basic plots to help you get oriented.","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"You can put your in the plot window and scroll to zoom. Right click and drag lets you pan around the scene, and left click and drag lets you do selection zoom (in 2D plots), or orbit around the scene (in 3D plots).","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"Many of these examples also work in 3D,","category":"page"},{"location":"basic-tutorials.html#Scatter-plot-1","page":"Tutorial","title":"Scatter plot","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial simple scatter\")","category":"page"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial markersize\")","category":"page"},{"location":"basic-tutorials.html#Line-plot-1","page":"Tutorial","title":"Line plot","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial simple line\")","category":"page"},{"location":"basic-tutorials.html#Adding-a-title-1","page":"Tutorial","title":"Adding a title","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial title\")","category":"page"},{"location":"basic-tutorials.html#Adding-to-a-scene-1","page":"Tutorial","title":"Adding to a scene","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial adding to a scene\")","category":"page"},{"location":"basic-tutorials.html#Adjusting-scene-limits-1","page":"Tutorial","title":"Adjusting scene limits","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial adjusting scene limits\")","category":"page"},{"location":"basic-tutorials.html#Basic-theming-1","page":"Tutorial","title":"Basic theming","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"@example_database(\"Tutorial basic theming\")","category":"page"},{"location":"basic-tutorials.html#Saving-plots-or-animations-1","page":"Tutorial","title":"Saving plots or animations","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"See the Output section.","category":"page"},{"location":"basic-tutorials.html#More-examples-1","page":"Tutorial","title":"More examples","text":"","category":"section"},{"location":"basic-tutorials.html#","page":"Tutorial","title":"Tutorial","text":"See the Example Gallery.","category":"page"},{"location":"statsmakie.html#StatsMakie-Tutorial-1","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"This tutorial shows how to create data visualizations using the StatsMakie grouping and styling APIs as well as the StatsMakie statistical recipes.","category":"page"},{"location":"statsmakie.html#Grouping-data-by-discrete-variables-1","page":"StatsMakie Tutorial","title":"Grouping data by discrete variables","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"The first feature that StatsMakie adds to Makie is the ability to group data by some discrete variables and use those variables to style the result. Let's first create some vectors to play with:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 1)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"To see how x and y relate to each other, we could simply try (be warned: the first plot is quite slow, the following ones will be much faster):","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 2)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"It looks like there are two components in the data, and we can ask whether they come from different values of the a variable:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 3)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Group will split the data by the discrete variable we provided and color according to that variable. Colors will cycle across a range of default values, but we can easily customize those:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 4)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"and of course we are not limited to grouping with colors: we can use the shape of the marker instead. Group(a) defaults to Group(color = a), whereas Group(marker = a) with encode the information about variable a in the marker:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 5)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Grouping by many variables is also supported:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 6)","category":"page"},{"location":"statsmakie.html#Styling-data-with-continuous-variables-1","page":"StatsMakie Tutorial","title":"Styling data with continuous variables","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"One of the advantage of using an inherently discrete quantity (like the shape of the marker) to encode a discrete variable is that we can use continuous attributes (e.g. color within a colorscale) for continuous variable. In this case, if we want to see how a, x, y, z interact, we could choose the marker according to a and style the color according to z:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 7)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Just like with Group, we can Style any number of attributes in the same plot. color is probably the most common, markersize is another sensible option (especially if we are using color already for the grouping):","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 8)","category":"page"},{"location":"statsmakie.html#Split-apply-combine-strategy-with-a-plot-1","page":"StatsMakie Tutorial","title":"Split-apply-combine strategy with a plot","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"StatsMakie also has the concept of a \"visualization\" function (which is somewhat different but inspired on Grammar of Graphics statistics). The idea is that any function whose return type is understood by StatsMakie (meaning, there is an appropriate visualization for it) can be passed as first argument and it will be applied to the following arguments as well.","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"A simple example is probably linear and non-linear regression.","category":"page"},{"location":"statsmakie.html#Linear-regression-1","page":"StatsMakie Tutorial","title":"Linear regression","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"StatsMakie knows how to compute both a linear and non-linear fit of y as a function of x, via the \"analysis functions\" linear (linear regression) and smooth (local polynomial regression) respectively:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 9)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"That was anti-climatic! It is the linear prediction of y given x, but it's a bit of a sad plot! We can make it more colorful by splitting our data by a, and everything will work as above:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 10)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"And then we can plot it on top of the previous scatter plot, to make sure we got a good fit:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 11)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Here of course it makes sense to group both things by color, but for line plots we have other options like linestyle:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 12)","category":"page"},{"location":"statsmakie.html#A-non-linear-example-1","page":"StatsMakie Tutorial","title":"A non-linear example","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Using non-linear techniques here is not very interesting as linear techniques work quite well already, so let's change variables:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 12)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"and then:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 13)","category":"page"},{"location":"statsmakie.html#Different-analyses-1","page":"StatsMakie Tutorial","title":"Different analyses","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"linear and smooth are two examples of possible analysis, but many more are possibles and it's easy to add new ones. If we were interested to the distributions of x and y for example we could do:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 14)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"The default plot type is determined by the dimensionality of the input and the analysis: with two variables one would get a heatmap:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 15)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"This plots is reasonably customizable in that one can pass keywords arguments to the histogram analysis:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 16)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"and change the default plot type to something else:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 17)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Of course heatmap is the saner choice, but why not abuse Makie 3D capabilities?","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Other available analysis are density (to use kernel density estimation rather than binning) and frequency (to count occurrences of discrete variables).","category":"page"},{"location":"statsmakie.html#What-if-I-have-data-instead?-1","page":"StatsMakie Tutorial","title":"What if I have data instead?","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"If one has data instead, it is possible to signal StatsMakie that we are working from a DataFrame (or any table actually) and it will interpret symbols as columns:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 18)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"And everything else works as usual:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 19)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 20)","category":"page"},{"location":"statsmakie.html#Wide-data-1","page":"StatsMakie Tutorial","title":"Wide data","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Other than comparing the same column split by a categorical variable, one may also compare different columns put side by side (here in a Tuple, (:PetalLength, :PetalWidth)). The attribute that styles them has to be set to bycolumn. Here color will distinguish :PetalLength versus :PetalWidth whereas the marker will distinguish the species.","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"StatsMakie\", 21)","category":"page"},{"location":"statsmakie.html#Analysis-of-data-1","page":"StatsMakie Tutorial","title":"Analysis of data","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"There are multiple options with which to analyze your data before plotting it.  These are:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"density (kernel density estimation, 1D or 2D)\nhistogram (1D, 2D or even 3D!)\nfrequency (count occurrences of discrete variables, 1 or 2D)\nlinear (linear regression)\nsmooth (LOESS regression)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"To use these analyses, one can simply write something like plot(density, x, y).  One can also pass options to the analysis, as in: plot(density(bandwidth=0.1), x, y), or something analogous for other analyses.","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"For example, see the initial setup below:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 1)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"for which one can plot a kernel density estimation:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 2)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"or a histogram:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 3)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"One can also count the frequency of a discrete variable:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 4)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"Fitting data using LOESS fitting is of course possible:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 5)","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"and, as seen earlier, fitting it with a line is possible as well.","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Analysis\", 6)","category":"page"},{"location":"statsmakie.html#Statistical-plot-types-1","page":"StatsMakie Tutorial","title":"Statistical plot types","text":"","category":"section"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"One can use box plots and violin plots with the same interface as StatsPlots.  ","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"One can create a box plot:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Box plot\")","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"or a violin plot:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Violin plot\")","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"and the two can be superimposed:","category":"page"},{"location":"statsmakie.html#","page":"StatsMakie Tutorial","title":"StatsMakie Tutorial","text":"@example_database(\"Violin and box plot\")","category":"page"},{"location":"help_functions.html#Help-functions-1","page":"Help functions","title":"Help functions","text":"","category":"section"},{"location":"help_functions.html#help-1","page":"Help functions","title":"help","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"help","category":"page"},{"location":"help_functions.html#AbstractPlotting.help","page":"Help functions","title":"AbstractPlotting.help","text":"help(func[; extended = false])\n\nWelcome to the main help function of Makie.jl / AbstractPlotting.jl.\n\nFor help on a specific function's arguments, type help_arguments(function_name).\n\nFor help on a specific function's attributes, type help_attributes(plot_Type).\n\nUse the optional extended = true keyword argument to see more details.\n\n\n\n\n\n","category":"function"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"Example usage:","category":"page"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"using Makie # hide\nhelp(scatter; extended = true)","category":"page"},{"location":"help_functions.html#help_arguments-1","page":"Help functions","title":"help_arguments","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"help_arguments","category":"page"},{"location":"help_functions.html#AbstractPlotting.help_arguments","page":"Help functions","title":"AbstractPlotting.help_arguments","text":"help_arguments([io], func)\n\nReturns a list of signatures for function func.\n\n\n\n\n\n","category":"function"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"Example usage:","category":"page"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"using Makie # hide\nhelp_arguments(stdout, scatter)","category":"page"},{"location":"help_functions.html#help_attributes-1","page":"Help functions","title":"help_attributes","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"help_attributes","category":"page"},{"location":"help_functions.html#AbstractPlotting.help_attributes","page":"Help functions","title":"AbstractPlotting.help_attributes","text":"help_attributes([io], Union{PlotType, PlotFunction}; extended = false)\n\nReturns a list of attributes for the plot type Typ. The attributes returned extend those attributes found in the default_theme.\n\nUse the optional keyword argument extended (default = false) to show in addition the default values of each attribute. usage:\n\n>help_attributes(scatter)\n\talpha\n\tcolor\n\tcolormap\n\tcolorrange\n\tdistancefield\n\tglowcolor\n\tglowwidth\n\tlinewidth\n\tmarker\n\tmarker_offset\n\tmarkersize\n\toverdraw\n\trotations\n\tstrokecolor\n\tstrokewidth\n\ttransform_marker\n\ttransparency\n\tuv_offset_width\n\tvisible\n\n\n\n\n\n","category":"function"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"Example usage:","category":"page"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"using Makie # hide\nhelp_attributes(stdout, Scatter; extended = true)","category":"page"},{"location":"help_functions.html#Plot-styling-options-1","page":"Help functions","title":"Plot styling options","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"Use these functions to find out the styling options.","category":"page"},{"location":"help_functions.html#available_marker_symbols-1","page":"Help functions","title":"available_marker_symbols","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"using AbstractPlotting # hide\nAbstractPlotting.available_marker_symbols()","category":"page"},{"location":"help_functions.html#available_gradients-1","page":"Help functions","title":"available_gradients","text":"","category":"section"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"using AbstractPlotting # hide\nAbstractPlotting.available_gradients()","category":"page"},{"location":"help_functions.html#","page":"Help functions","title":"Help functions","text":"For other plot attributes and their usage, see the section Plot attributes.","category":"page"},{"location":"functions-overview.html#Plotting-functions-overview-1","page":"Plotting functions overview","title":"Plotting functions overview","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"The follow document lists the atomic plotting functions and their usage. These are the most atomic primitives which one can stack together to form more complex plots.","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"For general help about each function, consult the Help functions.","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"See Plot function signatures for the available plot function signatures.","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"See Plot attributes for the available plot attributes.","category":"page"},{"location":"functions-overview.html#text-1","page":"Plotting functions overview","title":"text","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"text","category":"page"},{"location":"functions-overview.html#AbstractPlotting.text","page":"Plotting functions overview","title":"AbstractPlotting.text","text":"`text(string)`\n\nPlots a text.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Text{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  align           (:left, :bottom)\n  alpha           1.0\n  color           :black\n  font            \"Dejavu Sans\"\n  linewidth       1\n  overdraw        false\n  position        Float32[0.0, 0.0]\n  rotation        0.0\n  strokecolor     (:black, 0.0)\n  strokewidth     0\n  textsize        20\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 247:247) (Image: library lines 257:272) (Image: library lines 87:116) (Image: library lines 234:259)","category":"page"},{"location":"functions-overview.html#meshscatter-1","page":"Plotting functions overview","title":"meshscatter","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"meshscatter","category":"page"},{"location":"functions-overview.html#AbstractPlotting.meshscatter","page":"Plotting functions overview","title":"AbstractPlotting.meshscatter","text":"`meshscatter(x, y, z)` / `meshscatter(x, y)` / `meshscatter(positions)`\n\nPlots a mesh for each element in (x, y, z), (x, y), or positions (similar to scatter). markersize is a scaling applied to the primitive passed as marker\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for MeshScatter{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  linewidth       1\n  marker          GeometryTypes.HyperSphere{3,Float32}(Float32[0.0, 0.0, 0.0], 1.0f0)\n  markersize      0.1\n  overdraw        false\n  rotations       1.0 + 0.0im + 0.0jm + 0.0km\n  shading         true\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 29:54) (Image: library lines 135:140) (Image: library lines 154:169) (Image: library lines 335:384) (Image: library lines 414:416) (Image: library lines 593:615) (Image: library lines 717:752) (Image: library lines 120:164) (Image: library lines 4:63)","category":"page"},{"location":"functions-overview.html#scatter-1","page":"Plotting functions overview","title":"scatter","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"scatter","category":"page"},{"location":"functions-overview.html#AbstractPlotting.scatter","page":"Plotting functions overview","title":"AbstractPlotting.scatter","text":"`scatter(x, y, z)` / `scatter(x, y)` / `scatter(positions)`\n\nPlots a marker for each element in (x, y, z), (x, y), or positions.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Scatter{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha             1.0\n  color             :black\n  colormap          :viridis\n  colorrange        AbstractPlotting.Automatic()\n  distancefield     nothing\n  glowcolor         RGBA{N0f8}(0.0,0.0,0.0,0.0)\n  glowwidth         0.0\n  linewidth         1\n  marker            GeometryTypes.HyperSphere{2,T} where T\n  marker_offset     AbstractPlotting.Automatic()\n  markersize        0.1\n  overdraw          false\n  rotations         Billboard()\n  strokecolor       RGBA{N0f8}(0.0,0.0,0.0,0.0)\n  strokewidth       0.0\n  transform_marker  false\n  transparency      false\n  uv_offset_width   Float32[0.0, 0.0, 0.0, 0.0]\n  visible           true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 5:8) (Image: library lines 12:15) (Image: library lines 35:46) (Image: library lines 81:81) (Image: library lines 186:190) (Image: library lines 213:217) (Image: library lines 236:242) (Image: library lines 276:294) (Image: library lines 298:329) (Image: library lines 343:426) (Image: library lines 144:144) (Image: library lines 148:148) (Image: library lines 391:400) (Image: library lines 403:404) (Image: library lines 456:468) (Image: library lines 472:473) (Image: library lines 3:51) (Image: library lines 55:67) (Image: library lines 71:82) (Image: library lines 220:251) (Image: library lines 255:299) (Image: library lines 4:32) (Image: library lines 37:41) (Image: library lines 61:62) (Image: library lines 66:73) (Image: library lines 77:77) (Image: library lines 85:89) (Image: library lines 4:10) (Image: library lines 4:94) (Image: library lines 102:152)","category":"page"},{"location":"functions-overview.html#mesh-1","page":"Plotting functions overview","title":"mesh","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"mesh","category":"page"},{"location":"functions-overview.html#AbstractPlotting.mesh","page":"Plotting functions overview","title":"AbstractPlotting.mesh","text":"`mesh(x, y, z)`, `mesh(mesh_object)`, `mesh(x, y, z, faces)`, or `mesh(xyz, faces)`\n\nPlots a 3D mesh.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Mesh{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  interpolate     false\n  linewidth       1\n  overdraw        false\n  shading         true\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 134:157) (Image: library lines 160:160) (Image: library lines 4:14) (Image: library lines 17:25) (Image: library lines 61:64) (Image: library lines 67:68) (Image: library lines 71:80) (Image: library lines 83:84) (Image: library lines 281:287) (Image: library lines 335:384) (Image: library lines 442:448) (Image: library lines 452:452) (Image: library lines 477:486) (Image: library lines 396:539)","category":"page"},{"location":"functions-overview.html#linesegments-1","page":"Plotting functions overview","title":"linesegments","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"linesegments","category":"page"},{"location":"functions-overview.html#AbstractPlotting.linesegments","page":"Plotting functions overview","title":"AbstractPlotting.linesegments","text":"`linesegments(x, y, z)` / `linesegments(x, y)` / `linesegments(positions)`\n\nPlots a line for each pair of points in (x, y, z), (x, y), or positions.\n\nAttributes: The same as for lines\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for LineSegments{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  linestyle       nothing\n  linewidth       1.0\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 70:75) (Image: library lines 194:202) (Image: library lines 333:334) (Image: library lines 490:538) (Image: library lines 305:391) (Image: library lines 263:288) (Image: library lines 4:63)","category":"page"},{"location":"functions-overview.html#lines-1","page":"Plotting functions overview","title":"lines","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"lines","category":"page"},{"location":"functions-overview.html#AbstractPlotting.lines","page":"Plotting functions overview","title":"AbstractPlotting.lines","text":"`lines(x, y, z)` / `lines(x, y)` / or `lines(positions)`\n\nCreates a connected line plot for each element in (x, y, z), (x, y) or positions.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Lines{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  linestyle       nothing\n  linewidth       1.0\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 4:25) (Image: library lines 213:217) (Image: library lines 220:221) (Image: library lines 343:426) (Image: library lines 434:461) (Image: library lines 128:131) (Image: library lines 391:400) (Image: library lines 490:538) (Image: library lines 543:577) (Image: library lines 717:752) (Image: library lines 3:51) (Image: library lines 87:116) (Image: library lines 396:539) (Image: library lines 544:591) (Image: library lines 46:56) (Image: library lines 194:230) (Image: library lines 4:10)","category":"page"},{"location":"functions-overview.html#surface-1","page":"Plotting functions overview","title":"surface","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"surface","category":"page"},{"location":"functions-overview.html#AbstractPlotting.surface","page":"Plotting functions overview","title":"AbstractPlotting.surface","text":"`surface(x, y, z)`\n\nPlots a surface, where (x, y, z) are supposed to lie on a grid.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Surface{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  linewidth       1\n  overdraw        false\n  shading         true\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 90:98) (Image: library lines 101:109) (Image: library lines 115:122) (Image: library lines 232:240) (Image: library lines 244:259) (Image: library lines 266:277) (Image: library lines 295:331) (Image: library lines 420:437) (Image: library lines 581:589) (Image: library lines 291:305) (Image: library lines 55:86) (Image: library lines 4:10) (Image: library lines 19:23)","category":"page"},{"location":"functions-overview.html#volume-1","page":"Plotting functions overview","title":"volume","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"volume","category":"page"},{"location":"functions-overview.html#AbstractPlotting.volume","page":"Plotting functions overview","title":"AbstractPlotting.volume","text":"`volume(volume_data)`\n\nPlots a volume. Available algorithms are:\n\n:iso => IsoValue\n:absorption => Absorption\n:mip => MaximumIntensityProjection\n:absorptionrgba => AbsorptionRGBA\n:indexedabsorption => IndexedAbsorptionRGBA\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Volume{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  absorption      1.0f0\n  algorithm       :iso\n  alpha           1.0\n  color           nothing\n  colormap        :viridis\n  colorrange      (0, 1)\n  isorange        0.05f0\n  isovalue        0.5f0\n  linewidth       1\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 58:58) (Image: library lines 174:189) (Image: library lines 634:651) (Image: library lines 660:707) (Image: library lines 19:24) (Image: library lines 28:33) (Image: library lines 37:42)","category":"page"},{"location":"functions-overview.html#heatmap-1","page":"Plotting functions overview","title":"heatmap","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"heatmap","category":"page"},{"location":"functions-overview.html#AbstractPlotting.heatmap","page":"Plotting functions overview","title":"AbstractPlotting.heatmap","text":"`heatmap(x, y, values)` or `heatmap(values)`\n\nPlots a heatmap as an image on x, y (defaults to interpretation as dimensions).\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Heatmap{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  interpolate     false\n  levels          1\n  linewidth       0.0\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 65:66) (Image: library lines 30:31) (Image: library lines 85:105) (Image: library lines 166:173) (Image: library lines 232:232) (Image: library lines 298:329) (Image: library lines 174:189) (Image: library lines 55:67) (Image: library lines 220:251) (Image: library lines 4:10) (Image: library lines 19:23)","category":"page"},{"location":"functions-overview.html#image-1","page":"Plotting functions overview","title":"image","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"image","category":"page"},{"location":"functions-overview.html#AbstractPlotting.image","page":"Plotting functions overview","title":"AbstractPlotting.image","text":"`image(x, y, image)` / `image(image)`\n\nPlots an image on range x, y (defaults to dimensions).\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Image{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           :black\n  colormap        ColorTypes.RGBA{Float32}[RGBA{Float32}(0.0f0,0.0f0,0.0f0,1.0f0), RGBA{Float32}(1.0f0,1.0f0,1.0f0,1.0f0)]\n  colorrange      AbstractPlotting.Automatic()\n  linewidth       1\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 30:31) (Image: library lines 75:75) (Image: library lines 186:190) (Image: library lines 4:14) (Image: library lines 17:25) (Image: library lines 115:122) (Image: library lines 232:240) (Image: library lines 403:404) (Image: library lines 93:118) (Image: library lines 19:23)","category":"page"},{"location":"functions-overview.html#contour-1","page":"Plotting functions overview","title":"contour","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"contour","category":"page"},{"location":"functions-overview.html#AbstractPlotting.contour","page":"Plotting functions overview","title":"AbstractPlotting.contour","text":"contour(x, y, z)\n\nCreates a contour plot of the plane spanning x::Vector, y::Vector, z::Matrix\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Contour{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           nothing\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  fillrange       false\n  levels          5\n  linewidth       1.0\n  overdraw        false\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 208:210) (Image: library lines 227:228) (Image: library lines 174:189) (Image: library lines 581:589) (Image: library lines 4:8) (Image: library lines 12:15) (Image: library lines 46:51) (Image: library lines 55:86) (Image: library lines 19:23)","category":"page"},{"location":"functions-overview.html#arrows-1","page":"Plotting functions overview","title":"arrows","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"arrows","category":"page"},{"location":"functions-overview.html#AbstractPlotting.arrows","page":"Plotting functions overview","title":"AbstractPlotting.arrows","text":"`arrows(points, directions; kwargs...)`\n`arrows(x, y, u, v)`\n`arrows(x::AbstractVector, y::AbstractVector, u::AbstractMatrix, v::AbstractMatrix)`\n`arrows(x, y, z, u, v, w)`\n\nPlots arrows at the specified points with the specified components. u and v are interpreted as vector components (u being the x and v being the y), and the vectors are plotted with the tails at x, y.\n\nIf x, y, u, v are <: AbstractVector, then each 'row' is plotted as a single vector.\n\nIf u, v are <: AbstractMatrix, then x and y are interpreted as specifications for a grid, and u, v are plotted as arrows along the grid.\n\narrows can also work in three dimensions.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Arrows{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  arrowcolor   :black\n  arrowhead    AbstractPlotting.Automatic()\n  arrowsize    0.3\n  arrowtail    nothing\n  lengthscale  1.0f0\n  linecolor    :black\n  linestyle    nothing\n  linewidth    1\n  normalize    false\n  scale        Float32[1.0, 1.0, 1.0]","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 66:72) (Image: library lines 216:228) (Image: library lines 244:259)","category":"page"},{"location":"functions-overview.html#barplot-1","page":"Plotting functions overview","title":"barplot","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"barplot","category":"page"},{"location":"functions-overview.html#AbstractPlotting.barplot","page":"Plotting functions overview","title":"AbstractPlotting.barplot","text":"barplot(x, y; kwargs...)\n\nPlots a barplot; y defines the height.  x and y should be 1 dimensional.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for BarPlot{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  color        :black\n  colormap     :viridis\n  colorrange   AbstractPlotting.Automatic()\n  fillto       0.0\n  marker       GeometryTypes.HyperRectangle\n  strokecolor  :white\n  strokewidth  0\n  width        AbstractPlotting.Automatic()","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 79:80) (Image: library lines 52:52)","category":"page"},{"location":"functions-overview.html#poly-1","page":"Plotting functions overview","title":"poly","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"poly","category":"page"},{"location":"functions-overview.html#AbstractPlotting.poly","page":"Plotting functions overview","title":"AbstractPlotting.poly","text":"`poly(vertices, indices; kwargs...)`\n`poly(points; kwargs...)`\n`poly(shape; kwargs...)`\n\nPlots a polygon based on the arguments given. When vertices and indices are given, it functions similarly to mesh. When points are given, it draws one polygon that connects all the points in order. When a shape is given (essentially anything decomposable by GeometryTypes), it will plot decompose(shape).\n\npoly(coordinates, connectivity; kwargs...)\n\nPlots polygons, which are defined by coordinates (the coordinates of the vertices) and connectivity (the edges between the vertices).\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Poly{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  color         :black\n  colormap      :viridis\n  colorrange    AbstractPlotting.Automatic()\n  linestyle     nothing\n  overdraw      false\n  shading       false\n  strokecolor   RGBA{Float32}(0.0f0,0.0f0,0.0f0,0.0f0)\n  strokewidth   0.0\n  transparency  false\n  visible       true","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 57:63) (Image: library lines 109:131) (Image: library lines 194:202) (Image: library lines 87:116) (Image: library lines 168:216)","category":"page"},{"location":"functions-overview.html#band-1","page":"Plotting functions overview","title":"band","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"band","category":"page"},{"location":"functions-overview.html#AbstractPlotting.band","page":"Plotting functions overview","title":"AbstractPlotting.band","text":"band(x, ylower, yupper; kwargs...)\n\nPlots a band from ylower to yupper along x.\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Band{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  alpha           1.0\n  color           RGBA{Float32}(1.0f0,0.0f0,0.0f0,0.2f0)\n  colormap        :viridis\n  colorrange      AbstractPlotting.Automatic()\n  interpolate     false\n  linewidth       1\n  overdraw        false\n  shading         true\n  transparency    false\n  visible         true","category":"page"},{"location":"functions-overview.html#slider-1","page":"Plotting functions overview","title":"slider","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"slider","category":"page"},{"location":"functions-overview.html#AbstractPlotting.slider","page":"Plotting functions overview","title":"AbstractPlotting.slider","text":"Slider\n\nTODO add function signatures TODO add description\n\n\n\n\n\n","category":"function"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Slider{...} are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"  backgroundcolor    (:gray, 0.01)\n  buttoncolor        :white\n  buttonsize         15\n  buttonstroke       1.5\n  buttonstrokecolor  :black\n  position           (0, 0)\n  slidercolor        (:gray, 0.6)\n  sliderheight       50\n  sliderlength       200\n  start              AbstractPlotting.Automatic()\n  strokecolor        (:black, 0.4)\n  strokewidth        1\n  textcolor          :black\n  textsize           15\n  value              0\n  valueprinter       AbstractPlotting.default_printer","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 71:82) (Image: library lines 120:164) (Image: library lines 255:299) (Image: library lines 305:391) (Image: library lines 396:539) (Image: library lines 544:591)","category":"page"},{"location":"functions-overview.html#vbox-1","page":"Plotting functions overview","title":"vbox","text":"","category":"section"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"vbox","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"Available attributes and their defaults for Combined{AbstractPlotting.vbox,T} where T are: ","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"","category":"page"},{"location":"functions-overview.html#","page":"Plotting functions overview","title":"Plotting functions overview","text":"(Image: library lines 85:105) (Image: library lines 266:277) (Image: library lines 71:82) (Image: library lines 120:164) (Image: library lines 305:391) (Image: library lines 396:539) (Image: library lines 263:288) (Image: library lines 4:10) (Image: library lines 19:23)","category":"page"},{"location":"signatures.html#Plot-function-signatures-1","page":"Plot function signatures","title":"Plot function signatures","text":"","category":"section"},{"location":"signatures.html#General-function-signatures-and-usage-1","page":"Plot function signatures","title":"General function signatures and usage","text":"","category":"section"},{"location":"signatures.html#Create-a-new-plot-inside-a-new-scene-object-1","page":"Plot function signatures","title":"Create a new plot inside a new scene object","text":"","category":"section"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"func(args...; kw_args...)","category":"page"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"where func are the atomics function, e.g. lines, scatter, surface, etc. For a list of the available atomics functions, see Plotting functions overview.","category":"page"},{"location":"signatures.html#Create-a-new-plot-as-a-subscene-of-the-specified-scene-object-1","page":"Plot function signatures","title":"Create a new plot as a subscene of the specified scene object","text":"","category":"section"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"func(scene::SceneLike, args...; kw_args...)","category":"page"},{"location":"signatures.html#Add-a-plot-in-place-to-the-current_scene()-1","page":"Plot function signatures","title":"Add a plot in-place to the current_scene()","text":"","category":"section"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"func!(args...; kw_args...)","category":"page"},{"location":"signatures.html#Add-a-plot-in-place-to-the-specified-scene-as-a-subscene-1","page":"Plot function signatures","title":"Add a plot in-place to the specified scene as a subscene","text":"","category":"section"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"func!(scene::SceneLike, args...; kw_args...)","category":"page"},{"location":"signatures.html#Detailed-function-signatures-1","page":"Plot function signatures","title":"Detailed function signatures","text":"","category":"section"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"The input arguments are handled by the convert_arguments function, which handles a large variety of inputs. The signatures accepted by convert_arguments are also those accepted by the plotting functions.","category":"page"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"Accepted signatures are as follows:","category":"page"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"convert_arguments","category":"page"},{"location":"signatures.html#AbstractPlotting.convert_arguments","page":"Plot function signatures","title":"AbstractPlotting.convert_arguments","text":"Enables to use scatter like a surface plot with x::Vector, y::Vector, z::Matrix spanning z over the grid spanned by x y\n\n\n\n\n\nconvert_arguments(P, x, y, z)::(Vector)\n\nTakes vectors x, y, and z and turns it into a vector of 3D points of the values from x, y, and z. P is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x)::(Vector)\n\nTakes an input GeometryPrimitive x and decomposes it to points. P is the plot Type (it is optional).\n\n\n\n\n\nAccepts a Vector of Pair of Points (e.g. [Point(0, 0) => Point(1, 1), ...]) to encode e.g. linesegments or directions.\n\n\n\n\n\nconvert_arguments(P, y)::Vector\n\nTakes vector y and generates a range from 1 to the length of y, for plotting on an arbitrary x axis.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x, y)::(Vector)\n\nTakes vectors x and y and turns it into a vector of 2D points of the values from x and y.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x, y, z)::Tuple{ClosedInterval, ClosedInterval, Matrix}\n\nTakes 2 ClosedIntervals's x, y, and an AbstractMatrix z, and converts the closed range to linspaces with size(z, 1/2) P is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(x)::(String)\n\nTakes an input AbstractString x and converts it to a string.\n\n\n\n\n\nconvert_arguments(P, x)::(Vector)\n\nTakes an input HyperRectangle x and decomposes it to points.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x::VecOrMat, y::VecOrMat, z::Matrix)\n\nTakes 3 AbstractMatrix x, y, and z, converts them to Float32 and outputs them in a Tuple.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, Matrix)::Tuple{ClosedInterval, ClosedInterval, Matrix}\n\nTakes an AbstractMatrix, converts the dimesions n and m into ClosedInterval, and stores the ClosedInterval to n and m, plus the original matrix in a Tuple.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x, y, f)::(Vector, Vector, Matrix)\n\nTakes vectors x and y and the function f, and applies f on the grid that x and y span. This is equivalent to f.(x, y'). P is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, Matrix)::Tuple{ClosedInterval, ClosedInterval, ClosedInterval, Matrix}\n\nTakes an array of {T, 3} where T, converts the dimesions n, m and k into ClosedInterval, and stores the ClosedInterval to n, m and k, plus the original array in a Tuple.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x, y, z, i)::(Vector, Vector, Vector, Matrix)\n\nTakes 3 AbstractVector x, y, and z and the AbstractMatrix i, and puts everything in a Tuple.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(P, x, y, z, f)::(Vector, Vector, Vector, Matrix)\n\nTakes AbstractVector x, y, and z and the function f, evaluates f on the volume spanned by x, y and z, and puts x, y, z and f(x,y,z) in a Tuple.\n\nP is the plot Type (it is optional).\n\n\n\n\n\nconvert_arguments(Mesh, x, y, z)::GLNormalMesh\n\nTakes real vectors x, y, z and constructs a mesh out of those, under the assumption that every 3 points form a triangle.\n\n\n\n\n\nconvert_arguments(Mesh, xyz::AbstractVector)::GLNormalMesh\n\nTakes an input mesh and a vector xyz representing the vertices of the mesh, and creates indices under the assumption, that each triplet in xyz forms a triangle.\n\n\n\n\n\nconvert_arguments(Mesh, x, y, z, indices)::GLNormalMesh\n\nTakes real vectors x, y, z and constructs a triangle mesh out of those, using the faces in indices, which can be integers (every 3 -> one triangle), or GeometryTypes.Face{N, <: Integer}.\n\n\n\n\n\nconvert_arguments(Mesh, vertices, indices)::GLNormalMesh\n\nTakes vertices and indices, and creates a triangle mesh out of those. See to_vertices and to_triangles for more informations about accepted types.\n\n\n\n\n\n","category":"function"},{"location":"signatures.html#","page":"Plot function signatures","title":"Plot function signatures","text":"See Plot attributes for the available plot attributes.","category":"page"},{"location":"plot-attributes.html#Plot-attributes-1","page":"Plot attributes","title":"Plot attributes","text":"","category":"section"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"using Makie","category":"page"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"Below is the list of all of the available plot attributes for Makie. You can also get this by doing","category":"page"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"help_attributes(Typ[; extended = true])","category":"page"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"where Typ is the plot type.","category":"page"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"To view a plot's attributes and their values, you can call plot.attributes to view the raw output, or plot.attributes.attributes to get a Dict of the attribute keys and their values.","category":"page"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"p = scatter(rand(10), rand(10))[end]; # use `[end]` to access the plot\np.attributes\np.attributes.attributes","category":"page"},{"location":"plot-attributes.html#List-of-attributes-1","page":"Plot attributes","title":"List of attributes","text":"","category":"section"},{"location":"plot-attributes.html#","page":"Plot attributes","title":"Plot attributes","text":"Symbol Description\nabsorption Float32. Sets the absorption value for volume plots.\nalgorithm Algorithm to be used for volume plots. Can be one of :iso, :absorption, :mip, :absorptionrgba, or :indexedabsorption.\nalign (:pos, :pos). Specify the text alignment, where :pos can be :left, :center, or :right.\nalpha Float in [0,1]. The alpha value (transparency).\ncolor Symbol or Colorant. The color of the main plot element (markers, lines, etc.). Can be a color symbol/string like :red, or a Colorant.  Can also be an array or matrix of 'z-values' that are converted into colors by the colormap automatically.\ncolormap The color map of the main plot. Call available_gradients() to see what gradients are available. Can also be used with any Vector{<: Colorant}, or e.g. [:red, :black], or ColorSchemes.jl colormaps (by colormap = ColorSchemes.<colorscheme name>.colors).\ncolorrange A tuple (min, max) where min and max specify the data range to be used for indexing the colormap. E.g. color = [-2, 4] with colorrange = (-2, 4) will map to the lowest and highest color value of the colormap.\nfillrange Bool. Toggles range filling in contour plots.\nfont String. Specifies the font, and can choose any font available on the system.\nglowcolor Color Type. Color of the marker glow (outside the border) in scatter plots.\nglowwidth Number. Width of the marker glow in scatter plots.\nimage The image to be plotted on the plot.\ninterpolate Bool. For heatmap and images. Toggles color interpolation between nearby pixels.\nisorange Float32. Sets the isorange for volume plots.\nisovalue Float32. Sets the isovalue for volume plots.\nlevels Integer. Number of levels for a contour-type plot.\nlinestyle Symbol. Style of the line (for line and linesegments plots). Available styles are :dash, :dot, :dashdot, and :dashdotdot. You can also supply an array describing the length of each gap/fill.\nlinewidth Number. Width of the line in line and linesegments plots.\nmarker Symbol, Shape, or AbstractVector.\nmarker_offset Array of GeometryTypes.Point's. Specifies the offset coordinates for the markers. See the Marker offset example.\nmarkersize Number or AbstractVector. Specifies size (radius pixels) of the markers.\nposition NTuple{2,Float}, (x, y). Specify the coordinates to position text at.\nrotation Float32. Specifies the rotation in radians.\nrotations AbstractVector{Float32}. Similar to :rotation, except it specifies the rotations for each element in the plot.\nshading Bool. Specifies if shading should be on or not (for meshes).\nstrokecolor Color Type. Color of the marker stroke (border).\nstrokewidth Number. Width of the marker stroke (in pixels).\ntextsize Integer. Font pointsize for text.\ntransformation (:plane, location). Transforms the :plane to the specified location. Possible :plane's are :xy, :yz, and :xz.\nvisible Bool. Toggle visibility of plot.","category":"page"},{"location":"colors.html#Colors-1","page":"Colors","title":"Colors","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Makie has support for you to color your plots however you want to. You can manipulate the color of a plot by using the color keyword, and change the colormap by using the colormap keyword.","category":"page"},{"location":"colors.html#Colors-2","page":"Colors","title":"Colors","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"For line plots, you can provide a single color or symbol that will color the entire line; or, you can provide an array of values that map to colors using a colormap.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Any color symbol supported by Color.jl is supported, check out their page on named colors to see what you can get away with!  You can also pass RGB or RGBA values.","category":"page"},{"location":"colors.html#Colormaps-1","page":"Colors","title":"Colormaps","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Colormaps are mappings of values to colors.  You can supply the coloring values using the color keyword argument, and the colormap will automatically be adjusted to fit those values.  THe default colormap is viridis, which looks like this:","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Viridis color scheme\")","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"You can copy this code and substitute cmap with any Colormap to show the colormap.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Makie supports multiple colormap libraries.  Currently, support for colormaps provided by PlotUtils is inbuilt, meaning that any colormap symbol that works with Plots will also work with Makie.  Colormaps from the ColorSchemes package can be used by colormap = ColorSchemes.<name of colormap>.colors.  Similarly, colormaps from the PerceptualColourMaps package (which is a superset of the colorcet library) can be used by colormap = PerceptualColourMaps.cgrad(\"<name of colormap>\").  In principle, any Array of RGB values can be used as a colormap.","category":"page"},{"location":"colors.html#Builtins-1","page":"Colors","title":"Builtins","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Color gradients are arranged into color libraries. To get a list of color libraries, use the clibraries function. To get a list of color gradients in each library, call cgradients(library). showlibrary(library) creates a visual representation of color schemes. To change the active library, use clibrary(library). This is only necessary in the case of namespace clashes, e.g. if there are multiple :blues. The gradients can be reversed by Reverse(:<gradient_name>). The clims::NTuple{2,Number} attribute can be used to define the data values that correspond with the ends of the colormap.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"PlotUtils bundles with it colormaps from many libraries.  As of the 16th of March, 2019, those are:","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":":Plots    # default\n:cmocean\n:colorbrewer\n:colorcet","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Again, the clibrary function can be used to change the preferred colour library in case of namespae conflict.  For example, to prefer the use of cmocean colourmaps if available, you might call clibrary(:cmocean) before plotting.","category":"page"},{"location":"colors.html#Libraries-1","page":"Colors","title":"Libraries","text":"","category":"section"},{"location":"colors.html#PLOTS-1","page":"Colors","title":"PLOTS","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"The default library.  Created by Nathaniel J. Smith, Stefan van der Walt, and (in the case of viridis) Eric Firing. Released under CC0 license / public domain dedication. Full license info available here.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Colormap collection\", 1)","category":"page"},{"location":"colors.html#CMOCEAN-1","page":"Colors","title":"CMOCEAN","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Released under The MIT License (MIT) Copyright (c) 2015 Kristen M. Thyng. RGB values were taken from https://github.com/matplotlib/cmocean/tree/master/cmocean/rgb","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Colormap collection\", 2)","category":"page"},{"location":"colors.html#COLORCET-1","page":"Colors","title":"COLORCET","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Released under The MIT License (MIT) Copyright (c) 2015 Peter Kovesi. These are the perceptually correct color maps designed by Peter Kovesi and described in Peter Kovesi. Good Colour Maps: How to Design Them. arXiv:1509.03700 [cs.GR] 2015","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Colormap collection\", 3)","category":"page"},{"location":"colors.html#COLORBREWER-1","page":"Colors","title":"COLORBREWER","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Created by Cynthia Brewer, Mark Harrower, and The Pennsylvania State University. Released under the Apache License, Version 2.0. Full license info available here.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Colormap collection\", 4)","category":"page"},{"location":"colors.html#MISC-1","page":"Colors","title":"MISC","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Colormap collection\", 5)","category":"page"},{"location":"colors.html#Color-legends-1","page":"Colors","title":"Color legends","text":"","category":"section"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"To show the colormap and its scaling, you can use a color legend.  Color legends can be automatically produced by the colorlegend function, to which a Plot object must be passed.  Its range and the colormap it shows can also be manually altered, as can many of its attributes.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"To simply produce a color legend and plot it to the left of the original plot, you can produce a colorlegend and vbox it.  In the example below, p1 is the initial Scene, with only one plot.","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"scene = vbox(\n  p1,\n  colorlegend(\n    p1[end],            # get Plot object from Scene\n    camera = campixel!, # let vbox decide scene limits\n    raw = true          # no axes, other things as well\n  )\n)","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"Be warned that in its current form, this will look quite small compared to the size of the plot!","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"To fix that, you can theme it, as shown below:","category":"page"},{"location":"colors.html#","page":"Colors","title":"Colors","text":"@example_database(\"Line with varying colors\")","category":"page"},{"location":"theming.html#Config-file-1","page":"Config file","title":"Config file","text":"","category":"section"},{"location":"theming.html#","page":"Config file","title":"Config file","text":"A configuration file can be used to save theming options. The config file can be global (in joinpath(homedir(), \".config\", \"makie\", \"theme.jl\")) or local (a theme.jl in the current directory). The local config file has precedence over the global one. This allows for per-project config files and thus making it easier to have a common style for multiple plots without explicitly giving the desired options each time.","category":"page"},{"location":"theming.html#","page":"Config file","title":"Config file","text":"A config file must store an Attributes object. For example, if the contents of theme.jl is the following:","category":"page"},{"location":"theming.html#","page":"Config file","title":"Config file","text":"Attributes(\n    font = \"Chilanka\",\n    backgroundcolor = :gray,\n    color = :blue,\n    linestyle = :dot,\n    linewidth = 3\n)","category":"page"},{"location":"theming.html#","page":"Config file","title":"Config file","text":"then Makie will start with this theme.","category":"page"},{"location":"axis.html#Axis-1","page":"Axis","title":"Axis","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"The axis is just a scene object, making it easy to manipulate and share between plots. Axis objects also contains the mapping you want to apply to the data and can interactively be changed. An Axis object can be created from any boundingbox and inserted into any plot.","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"There are two types of axes: Axis2D and Axis3D.","category":"page"},{"location":"axis.html#Interacting-with-the-Axis-1","page":"Axis","title":"Interacting with the Axis","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"One can quite easily interact with the attributes of the axis like with any other plot.","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"You can access the axis of a scene by doing","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"axis = scene[Axis]","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"The axis attributes are nested, and there are different attributes depending on whether it is an Axis2D or Axis3D object.","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"You can access the nested attributes in multiple ways. Take the nested attribute axis -> :names -> :axisnames, for example:","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"axis[:names, :axisnames] = (\"x\", \"y\", \"z\")\naxis[:names][:axisnames] = (\"x\", \"y\", \"z\")\naxis = (names = (axisnames = (\"x\", \"y\", \"z\"),),)","category":"page"},{"location":"axis.html#Examples-1","page":"Axis","title":"Examples","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"@example_database(\"Unicode Marker\")","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"@example_database(\"Axis + Surface\")","category":"page"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"@example_database(\"Axis theming\")","category":"page"},{"location":"axis.html#Axis2D-1","page":"Axis","title":"Axis2D","text":"","category":"section"},{"location":"axis.html#Axis2D-attributes-groups-1","page":"Axis","title":"Axis2D attributes groups","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nframe See the detailed descriptions for frame attributes.\ngrid See the detailed descriptions for grid attributes.\nnames See the detailed descriptions for names attributes.\nticks See the detailed descriptions for ticks attributes.","category":"page"},{"location":"axis.html#:grid-1","page":"Axis","title":":grid","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nlinecolor Symbol or Colorant. Specifies the color of the grid lines. Can be a color symbol/string like :red, or a Colorant.\nlinestyle \nlinewidth NTuple{2, Number}. Width of the x and y grids.","category":"page"},{"location":"axis.html#:ticks-1","page":"Axis","title":":ticks","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nalign NTuple{2,(:pos, :pos)}. Specify the text alignment for the axis ticks, where :pos can be :left, :center, or :right\nfont NTuple{2,String}. Specifies the font and can name any font available on the system.\ngap Number. Specifies the gap (in pixels) between the axis tick labels and the axes themselves.\nlinecolor NTuple{2,Symbol or Colorant}. Specifies the color of the grid lines. Can be a color symbol/string like :red, or a Colorant.\nlinestyle \nlinewidth NTuple{2,Number}. Width of the axes ticks.\nrotation NTuple{3,Float32}. Specifies the rotations for each axis's ticks, in radians.\ntextcolor NTuple{2,Symbol or Colorant}. Specifies the color of the axes ticks. Can be a color symbol/string like :red, or a Colorant.\ntextsize NTuple{2,Int}. Font pointsize for tick labels.\ntitle_gap Number. Specifies the gap (in pixels) between the axis titles and the axis tick labels.","category":"page"},{"location":"axis.html#:frame-1","page":"Axis","title":":frame","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\narrow_size Number. Size of the axes arrows.\naxis_arrow Bool. Toggles the axes arrows.\naxis_position \nframes NTuple{2,NTuple{2,Bool}}.\nlinecolor Symbol or Colorant. Specifies the color of the grid lines. Can be a color symbol/string like :red, or a Colorant.\nlinestyle \nlinewidth Number. Widths of the axes frame lines.","category":"page"},{"location":"axis.html#:names-1","page":"Axis","title":":names","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nalign (:pos, :pos). Specify the text alignment, where :pos can be :left, :center, or :right.\naxisnames NTuple{2,String}. Specifies the text labels for the axes.\nfont NTuple{2,String}. Specifies the font and can name any font available on the system.\nrotation NTuple{3,Float32}. Specifies the rotations for each axis's label, in radians.\ntextcolor NTuple{2,Symbol or Colorant}. Specifies the color of the axes labels. Can be a color symbol/string like :red, or a Colorant.\ntextsize Integer. Font pointsize for text.","category":"page"},{"location":"axis.html#Axis3D-1","page":"Axis","title":"Axis3D","text":"","category":"section"},{"location":"axis.html#Axis3D-attributes-groups-1","page":"Axis","title":"Axis3D attributes groups","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nframe See the detailed descriptions for frame attributes.\nnames See the detailed descriptions for names attributes.\nscale NTuple{3,Float}. Specifies the scaling for the axes.\nshowaxis NTuple{3,Bool}. Specifies whether to show the axes.\nshowgrid NTuple{3,Bool}. Specifies whether to show the axis grids.\nshowticks NTuple{3,Bool}. Specifies whether to show the axis ticks.\nticks See the detailed descriptions for ticks attributes.","category":"page"},{"location":"axis.html#:ticks-2","page":"Axis","title":":ticks","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nalign NTuple{3,(:pos, :pos)}. Specify the text alignment for the axis ticks, where :pos can be :left, :center, or :right.\nfont NTuple{3,String}. Specifies the font for the axis ticks, and can choose any font available on the system.\ngap Number. Specifies the gap (in pixels) between the axis ticks and the axes themselves.\nrotation NTuple{3,Quaternion{Float32}}. Specifies the rotations for each axis's ticks, in radians.\ntextcolor NTuple{3,Symbol or Colorant}. Specifies the color of the axes ticks. Can be a color symbol/string like :red, or a Colorant.\ntextsize Integer. Font pointsize for text.","category":"page"},{"location":"axis.html#:frame-2","page":"Axis","title":":frame","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\naxiscolor Symbol or Colorant. Specifies the color of the axes. Can be a color symbol/string like :red, or a Colorant.\nlinecolor Symbol or Colorant. Specifies the color of the grid lines. Can be a color symbol/string like :red, or a Colorant.\nlinewidth Number. Width of the axes lines.","category":"page"},{"location":"axis.html#:names-2","page":"Axis","title":":names","text":"","category":"section"},{"location":"axis.html#","page":"Axis","title":"Axis","text":"Symbol Description\nalign NTuple{3,(:pos, :pos)}. Specify the text alignment for the axis labels, where :pos can be :left, :center, or :right.\naxisnames NTuple{3,String}. Specifies the axis labels.\nfont NTuple{3,String}. Specifies the font for the axis labels, and can choose any font available on the system.\ngap Number. Specifies the gap (in pixels) between the axis labels and the axes themselves.\nrotation NTuple{3,Quaternion{Float32}}. Specifies the rotations for each axis's label, in radians.\ntextcolor NTuple{3,Symbol or Colorant}. Specifies the color of the axes labels. Can be a color symbol/string like :red, or a Colorant.\ntextsize NTuple{3,Int}. Font pointsize for axes labels.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"CurrentModule = Makie","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"using Makie","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"using Makie","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"using Makie","category":"page"},{"location":"interaction.html#Interaction-1","page":"Interaction","title":"Interaction","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Makie offers a sophisticated referencing system to share attributes across the Scene in your plot. This is great for interaction, animations and saving resources – also if the backend decides to put data on the GPU you might even share those in GPU memory.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Interaction and animations in Makie are handled by using Observables. An \"observable\", called Node in Makie, is a structure that can have its value updated interactively. Interaction, animations and more are done using Nodes and event triggers.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"In this page we overview how the Nodes pipeline works, how event-triggering works, and we give an introduction to the existing \"atomic\" functions for interaction. Examples that use interaction can be found in the Examples/interaction page (see Example Gallery as well).","category":"page"},{"location":"interaction.html#Node-interaction-pipeline-1","page":"Interaction","title":"Node interaction pipeline","text":"","category":"section"},{"location":"interaction.html#The-Node-structure-1","page":"Interaction","title":"The Node structure","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"A Node is a Julia structure that allows its value to be updated interactively. This means that anything that uses a Node could have its behavior updated interactively, as we will showcase in this page.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Let's start by creating a Node:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"x = Node(0.0) # set up a Node, and give it a default value of 0.0","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"The value of the x can be changed simply using push!:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"push!(x, 3.14);\nx","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Notice that you can access the value of a Node by indexing it with nothing, i.e. x[]. However, we recommend to use the function to_value to get the value of a Node, because to_value is a general function that works with all types instead of only Nodes. E.g.:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"to_value(x)","category":"page"},{"location":"interaction.html#Nodes-depending-on-other-Nodes-1","page":"Interaction","title":"Nodes depending on other Nodes","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"You can create a node depending on another node using lift:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"f(a) = a^2\ny = lift(a -> f(a), x)","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Now, for every value of the Node x, the derived Node y will hold the value f(x). Updating the value of x will also update the value of y!","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"For example:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"push!(x, 10.0)\nfor i in (x, y)\n    println(to_value(i))\nend","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"That is to say, the Node y maps the function f (which is a -> a^2 in this case) on x whenever the Node x is updated, and updates the corresponding value in y. This is the basis of updating Nodes, and is used for updating plots in Makie. Any plot created based on this pipeline system will get updated whenever the nodes it is based on are updated!","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Note: for now, lift is just an alias for Observables.map, and Node is just an alias for Observables.Observable. This allows decoupling of the APIs.","category":"page"},{"location":"interaction.html#Event-triggering-1","page":"Interaction","title":"Event triggering","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Often it is the case that you want an event to be triggered each time a Node has its value updated. This is done using the on-do block from Observables. For example, the following code block \"triggers\" whenever x's value is changed:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"on(x) do val\n    println(\"x just got the value $val\")\nend","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"As you can see, at we have run this block in Julia, but nothing happened yet. Instead, a function was defined. However, upon doing:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"push!(x, 5.0);","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Boom! The event of the on-do block was triggered! We will be using this in the following paragraphs to establish interactiveness.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"For more info please have a look at Observables.","category":"page"},{"location":"interaction.html#Atomic-interaction-functions-1","page":"Interaction","title":"Atomic interaction functions","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"This section overviews some simple and specific functions that make interaction much simpler.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"coming soon...","category":"page"},{"location":"interaction.html#Animation-using-time-1","page":"Interaction","title":"Animation using time","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"To animate a scene, you need to create a Node, e.g.:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"time = Node(0.0)","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"and use lift on the Node to set up a pipeline to access its value. For example:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"scene = Scene()\ntime = Node(0.0)\nmyfunc(v, t) = sin.(v, t)\n\nscene = lines!(\n    scene,\n    lift(t -> f.(range(0, stop=2pi, length=50), t), time)\n)","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"now, whenever the Node time is updated (e.g. when you push! to it), the plot will also be updated.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"push!(time, Base.time())","category":"page"},{"location":"interaction.html#Interaction-using-the-mouse-1","page":"Interaction","title":"Interaction using the mouse","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"A few default Nodes are already implemented in a scene's Events (see them in scene.events), so to use them in your interaction pipeline, you can simply lift them.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"For example, for interaction with the mouse cursor, lift the mouseposition signal.","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"pos = lift(scene.events.mouseposition) do mpos\n    # do stuff\nend","category":"page"},{"location":"interaction.html#Correct-way-to-animate-a-plot-1","page":"Interaction","title":"Correct way to animate a plot","text":"","category":"section"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"You can animate a plot in a for loop:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"r = 1:10\nfor i = 1:length(r)\n    push!(s[:markersize], r[i])\n    AbstractPlotting.force_update!()\n    sleep(1/24)\nend","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"But, if you push! to a plot, it doesn't necessarily get updated whenever an attribute changes, so you must call force_update!().","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"A better way to do it is to access the attribute of a plot directly using its symbol, and when you change it, the plot automatically gets updated live, so you no longer need to call force_update!():","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"for i = 1:length(r)\n    s[:markersize] = r[i]\n    # AbstractPlotting.force_update!() is no longer needed\n    sleep(1/24)\nend","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"Similarly, for plots based on functions:","category":"page"},{"location":"interaction.html#","page":"Interaction","title":"Interaction","text":"scene = Scene()\nv = range(0, stop=4pi, length=50)\nf(v, t) = sin(v + t) # some function\ns = lines!(\n    scene,\n    lift(t -> f.(v, t), time),\n)[end];\n\nfor i = 1:length(v)\n    push!(time, i)\n    sleep(1/24)\nend","category":"page"},{"location":"recipes.html#Plot-Recipes-1","page":"Plot Recipes","title":"Plot Recipes","text":"","category":"section"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"Recipes allow you to extend Makie with your own custom types and plotting commands.","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"There are two types of recipes. Type recipes define a simple mapping from a user defined type to an existing plot type. Full recipes can customize the theme and define a custom plotting function.","category":"page"},{"location":"recipes.html#Type-recipes-1","page":"Plot Recipes","title":"Type recipes","text":"","category":"section"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"Type recipes are really simple and just overload the argument conversion pipeline, converting from one type to another, plottable type.","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"An example is:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"convert_arguments(x::Circle) = (decompose(Point2f, x),)","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"This can be done for all plot types or for a subset of plot types:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"# All plot types\nconvert_arguments(P::Type{<:AbstractPlot}, x::MyType) = convert_arguments(P, rand(10, 10))\n# Only for scatter plots\nconvert_arguments(P::Type{<:Scatter}, x::MyType) = convert_arguments(P, rand(10, 10))","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"Optionally you may define the default plot type so that plot(x::MyType) will use this:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"plottype(::MyType) = Surface","category":"page"},{"location":"recipes.html#Full-recipes-with-the-@recipe-macro-1","page":"Plot Recipes","title":"Full recipes with the @recipe macro","text":"","category":"section"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"A full recipe for MyPlot comes in two parts. First is the plot type name, arguments and theme definition which are defined using the @recipe macro. Second is a custom plot! for MyPlot, implemented in terms of the atomic plotting functions. We use an example to show how this works:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"# arguments (x, y, z) && theme are optional\n@recipe(MyPlot, x, y, z) do scene\n    Theme(\n        plot_color => :red\n    )\nend","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"This macro expands to several things. Firstly a type definition:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"const MyPlot{ArgTypes} = Combined{myplot, ArgTypes}","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"The type parameter of Combined contains the function instead of e.g. a symbol. This way the mapping from MyPlot to myplot is safer and simpler. (The downside is we always need a function myplot - TODO: is this a problem?) The following signatures are defined to make MyPlot nice to use:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"myplot(args...; kw_args...) = ...\nmyplot!(scene, args...; kw_args...) = ...\nmyplot(kw_args::Dict, args...) = ...\nmyplot!(scene, kw_args::Dict, args...) = ...\n#etc (not 100% settled what signatures there will be)","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"A specialization of argument_names is emitted if you have an argument list (x,y,z) provided to the recipe macro:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"`argument_names(::Type{<: MyPlot}) = (:x, :y, :z)`","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"This is optional but it will allow the use of plot_object[:x] to fetch the first argument from the call plot_object = myplot(rand(10), rand(10), rand(10)), for example.","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"Alternatively you can always fetch the ith argument using plot_object[i], and if you leave out the (x,y,z), the default version of argument_names will provide plot_object[:arg1] etc.","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"The theme given in the body of the @recipe invocation is inserted into a specialization of default_theme which inserts the theme into any scene that plots Myplot:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"function default_theme(scene, ::Myplot)\n    Theme(\n        plot_color => :red\n    )\nend","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"As the second part of defining MyPlot, you should implement the actual plotting of the MyPlot object by specializing plot!:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"function plot!(plot::MyPlot)\n    # normal plotting code, building on any previously defined recipes\n    # or atomic plotting operations, and adding to the combined `plot`:\n    lines!(plot, rand(10), color = plot[:plot_color])\n    plot!(plot, plot[:x], plot[:y])\n    plot\nend","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"It's possible to add specializations here, depending on the argument types supplied to myplot. For example, to specialize the behavior of myplot(a) when a is a 3D array of floating point numbers:","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"const MyVolume = MyPlot{Tuple{<:AbstractArray{<: AbstractFloat, 3}}}\nargument_names(::Type{<: MyVolume}) = (:volume,) # again, optional\nfunction plot!(plot::MyVolume)\n    # plot a volume with a colormap going from fully transparent to plot_color\n    volume!(plot, plot[:volume], colormap = :transparent => plot[:plot_color])\n    plot\nend","category":"page"},{"location":"recipes.html#","page":"Plot Recipes","title":"Plot Recipes","text":"@example_database(\"Type recipe for molecule simulation\")","category":"page"},{"location":"output.html#Output-1","page":"Output","title":"Output","text":"","category":"section"},{"location":"output.html#","page":"Output","title":"Output","text":"Makie overloads the FileIO interface, so it is simple to save plots as images or videos.","category":"page"},{"location":"output.html#Static-plots-1","page":"Output","title":"Static plots","text":"","category":"section"},{"location":"output.html#","page":"Output","title":"Output","text":"To save a scene as an image, you can just write e.g.:","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"Makie.save(\"plot.png\", scene)\nMakie.save(\"plot.jpg\", scene)","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"where scene is the scene handle.","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"In the backend, ImageMagick is used for the image format conversions.","category":"page"},{"location":"output.html#Stepper-plots-1","page":"Output","title":"Stepper plots","text":"","category":"section"},{"location":"output.html#","page":"Output","title":"Output","text":"A Stepper is a scene type that simplifies the cumulative plotting, modifying of an existing scene, and saving of scenes. These are great for showing off progressive changes in plots, such as demonstrating the effects of theming or changing data.","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"You can initialize a Stepper by doing:","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"st = Stepper(scene, @replace_with_a_path)","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"and save the scene content & increment the stepper by using:","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"step!(st)","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"@example_database(\"Stepper demo\")","category":"page"},{"location":"output.html#Animated-plots-1","page":"Output","title":"Animated plots","text":"","category":"section"},{"location":"output.html#","page":"Output","title":"Output","text":"It is also possible to output animated plots as videos (note that this requires ffmpeg to be installed and properly configured on your computer (test this by running ffmpeg -version from a terminal window).)","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"record","category":"page"},{"location":"output.html#AbstractPlotting.record","page":"Output","title":"AbstractPlotting.record","text":"record(func, scene, path; framerate = 24)\n\nusage:\n\n    record(scene, \"test.gif\") do io\n        for i = 1:100\n            scene.plots[:color] = ...# animate scene\n            recordframe!(io) # record a new frame\n        end\n    end\n\n\n\n\n\nrecord(func, scene, path, iter; framerate = 24)\n\nusage:\n\n    record(scene, \"test.gif\", 1:100) do i\n        scene.plots[:color] = ...# animate scene\n    end\n\n\n\n\n\n","category":"function"},{"location":"output.html#","page":"Output","title":"Output","text":"For recording of videos (either as .mp4 or .gif), you can do:","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"record(scene, \"video.mp4\", itr) do i\n    func(i) # or some other animation in scene\nend","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"where itr is an iterator and scene is the scene handle.","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"It is also possible to record to gifs:","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"record(scene, \"video.gif\", itr) do i\n    func(i) # or some other animation in scene\nend","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"In both cases, the returned value is a path pointing to the location of the recorded file.","category":"page"},{"location":"output.html#Example-usage-1","page":"Output","title":"Example usage","text":"","category":"section"},{"location":"output.html#","page":"Output","title":"Output","text":"@example_database(\"Record Video\")","category":"page"},{"location":"output.html#","page":"Output","title":"Output","text":"For more info, consult the Example Gallery.","category":"page"},{"location":"troubleshooting.html#Troubleshooting-1","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting.html#Installation-issues-1","page":"Troubleshooting","title":"Installation issues","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"Here, we assume you are running Julia on the vanilla system image - no PackageCompiler goodness.  If you are using PackageCompiler, check out the page on compilation.","category":"page"},{"location":"troubleshooting.html#No-Scene-displayed-or-GLMakie-fails-to-build-1","page":"Troubleshooting","title":"No Scene displayed or GLMakie fails to build","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"If Makie builds, but when a plotting, no Scene is displayed, as in:","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"julia> using Makie\n\njulia> lines([0,1], [0,1])\nScene (960px, 540px):\nevents:\n    window_area: GeometryTypes.HyperRectangle{2,Int64}([0, 0], [0, 0])\n    window_dpi: 100.0\n    window_open: false\n    mousebuttons: Set(AbstractPlotting.Mouse.Button[])\n    mouseposition: (0.0, 0.0)\n    mousedrag: notpressed\n    scroll: (0.0, 0.0)\n    keyboardbuttons: Set(AbstractPlotting.Keyboard.Button[])\n    unicode_input: Char[]\n    dropped_files: String[]\n    hasfocus: false\n    entered_window: false\nplots:\n   *Axis2D{...}\n   *Lines{...}\nsubscenes:\n   *scene(960px, 540px)","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"then, your backend may not have built correctly.  By default, Makie will try to use GLMakie as a backend, but if it does not build correctly for whatever reason, then scenes will not be displayed. Ensure that your graphics card supports OpenGL; if it does not (old models, or relatively old integrated graphics cards), then you may want to consider CairoMakie.","category":"page"},{"location":"troubleshooting.html#Plotting-issues-1","page":"Troubleshooting","title":"Plotting issues","text":"","category":"section"},{"location":"troubleshooting.html#Dimension-too-large-1","page":"Troubleshooting","title":"Dimension too large","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"In general, plotting functions tend to plot whatever's given to them as a single texture.  This can lead to GL errors, or OpenGL failing silently.  To circumvent this, one can 'tile' the plots (i.e., assemble them piece-by-piece) to decrease the individual texture size.","category":"page"},{"location":"troubleshooting.html#d-plots-(heatmaps,-images,-etc.)-1","page":"Troubleshooting","title":"2d plots (heatmaps, images, etc.)","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"heatmap(rand(Float32, 24900, 26620))","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"may either fail with an error","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"   Error showing value of type Scene:\nERROR: glTexImage 2D: width too large. Width: 24900\n[...]","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"or fail silently:","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"(Image: untiled heatmap)","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"Tiling the plot, as shown below, yields a correct image.","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"sc = Scene()\ndata = rand(Float32, 24900, 26620)\nheatmap!(sc, data[1:end÷2, 1:end÷2])\nheatmap!(sc, data[(end÷2 + 1):end, 1:end÷2])\nheatmap!(sc, data[1:end÷2, (end÷2 + 1):end])\nheatmap!(sc, data[(end÷2 + 1):end, (end÷2 + 1):end])","category":"page"},{"location":"troubleshooting.html#d-plots-(volumes)-1","page":"Troubleshooting","title":"3d plots (volumes)","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"The approach here is similar to that for the 2d plots, except that here there is a helpful function that gives the maximum texture size. You can check the maximum texture size with:","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"using Makie, GLMakie, ModernGL\n# simple plot to open a window (needs to be open for opengl)\ndisplay(scatter(rand(10)))\nglGetIntegerv(GL_MAX_3D_TEXTURE_SIZE)","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"and then just split the volume:","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"vol = rand(506, 720, 1440)\nranges = (1:256, 1:256, 1:256)\nscene = volume(ranges..., vol[ranges...])\nfor i in 1:3\n    global ranges\n    ranges = ntuple(3) do j\n        s = j == i ? last(ranges[j]) : 1\n        e = j == i ? size(vol, j) : last(ranges[j])\n        s:e\n    end\n    volume!(ranges..., vol[ranges...])\nend\nscene","category":"page"},{"location":"troubleshooting.html#General-issues-1","page":"Troubleshooting","title":"General issues","text":"","category":"section"},{"location":"troubleshooting.html#My-font-doesn't-work!-1","page":"Troubleshooting","title":"My font doesn't work!","text":"","category":"section"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"If Makie can't find your font, you can do two things:","category":"page"},{"location":"troubleshooting.html#","page":"Troubleshooting","title":"Troubleshooting","text":"Check that the name matches and that the font is in one of the directories in:\nusing FreeTypeAbstraction; FreeTypeAbstraction.valid_fontpaths\nYou can add a custom font path via the environment variable:\nENV[\"FREETYPE_ABSTRACTION_FONT_PATH\"] = \"/path/to/your/fonts\"\nSpecify the path to the font; instead of font = \"Noto\", you could write joindir(homedir(), \"Noto.ttf\") or something.","category":"page"},{"location":"why-makie.html#Why-Makie?-1","page":"Why Makie?","title":"Why Makie?","text":"","category":"section"},{"location":"why-makie.html#","page":"Why Makie?","title":"Why Makie?","text":"Makie is a high level plotting interface for GLVisualize, with a focus on interactivity and speed.","category":"page"},{"location":"why-makie.html#","page":"Why Makie?","title":"Why Makie?","text":"It can also be seen as a prototype for a new design of Plots.jl, since it will implement a very similar interface and incorporate a lot of the ideas.","category":"page"},{"location":"why-makie.html#","page":"Why Makie?","title":"Why Makie?","text":"A fresh start instead of the already available GLVisualize backend for Plots.jl was needed for the following reasons:","category":"page"},{"location":"why-makie.html#","page":"Why Makie?","title":"Why Makie?","text":"Plots.jl was written to create static plots without any interaction. This is deeply reflected in the internal design and makes it hard to integrate the high performance interaction possibilities from GLVisualize.\nPlots.jl has many high level plotting packages as a backend which lead to a very inconsistent design for the backends. For example, there is no straight interface a backend needs to implement. The backend abstraction happens at a very high level and the Plots.jl design relies on the high-level backends to fill in a lot of functionality - which lead to a lot of duplicated work for the lower level backends and a lot of inconsistent behavior since the code isn't shared between backends. It also means that it is a lot of work to maintain a backend.\nThe attributes a plot/series contains and where the default creation happens is opaque and not well documented. Sometimes it's the task of the backend to create defaults for missing attributes, sometimes Plots.jl creates the defaults. A missing attribute is signalled in too many different ways (e.g. false, nothing, \"\") which then needs to be checked and filled in by the backend. This leads to making it very challenging to e.g. find the color of a line for different plot types and creates buggy, inconsistent and messy backend code.\nAs mentioned in point 2, there is not a single consistent low level drawing API. This also influences recipes, since there is not a straight mapping to a low level drawing API and therefore it's not that easy to compose. There should be a finite set of \"atomic\" drawing operations (which can't be decomposed further) which a backend needs to implement and the rest should be implemented via recipes using those atomic operations. So once a backend implements those, it will support all of the plotting operations and only minor maintenance work needs to be done from that point on.\nBackend loading is done in Plots.jl via evaling the backend code. This has at 4 negative consequences:\nBackend code can't be precompiled leading to longer load times\nBackend dependencies are not in the Plots.jl REQUIRE file\nBackend dependencies get loaded via a function that gets evaled, so it's a bit awkward to use those dependencies in the function inside a backend\nWorld age issues because of the eval","category":"page"}]
}
